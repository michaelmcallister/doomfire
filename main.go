package main

import (
	"image/color"
	"math/rand"
	"sync"

	"github.com/hajimehoshi/ebiten"
)

var waitGroup sync.WaitGroup

const width, height = 600, 400

var firePixels []int

var rgb = []color.RGBA{
	{0x07, 0x07, 0x07, 0xFF},
	{0x1F, 0x07, 0x07, 0xFF},
	{0x2F, 0x0F, 0x07, 0xFF},
	{0x47, 0x0F, 0x07, 0xFF},
	{0x57, 0x17, 0x07, 0xFF},
	{0x67, 0x1F, 0x07, 0xFF},
	{0x77, 0x1f, 0x07, 0xFF},
	{0x8f, 0x27, 0x07, 0xFF},
	{0x9F, 0x2F, 0x07, 0xFF},
	{0xAF, 0x3F, 0x07, 0xFF},
	{0xBF, 0x47, 0x07, 0xFF},
	{0xC7, 0x47, 0x07, 0xFF},
	{0xDF, 0x4F, 0x07, 0xFF},
	{0xDF, 0x57, 0x07, 0xFF},
	{0xDF, 0x57, 0x07, 0xFF},
	{0xDF, 0x57, 0x07, 0xFF},
	{0xD7, 0x67, 0x0F, 0xFF},
	{0xCF, 0x6F, 0x0F, 0xFF},
	{0xCF, 0x77, 0x0F, 0xFF},
	{0xCF, 0x7F, 0x0F, 0xFF},
	{0xCF, 0x7F, 0x0F, 0xFF},
	{0xCF, 0x87, 0x17, 0xFF},
	{0xC7, 0x87, 0x17, 0xFF},
	{0xC7, 0x8F, 0x17, 0xFF},
	{0xC7, 0x97, 0x1F, 0xFF},
	{0xBF, 0x9F, 0x1F, 0xFF},
	{0xBF, 0x9F, 0x1F, 0xFF},
	{0xBF, 0xA7, 0x27, 0xFF},
	{0xBF, 0xA7, 0x27, 0xFF},
	{0xBF, 0xAF, 0x2F, 0xFF},
	{0xB7, 0xAF, 0x2F, 0xFF},
	{0xB7, 0xB7, 0x2F, 0xFF},
	{0xB7, 0xB7, 0x37, 0xFF},
	{0xCF, 0xCF, 0x6F, 0xFF},
	{0xDF, 0xDF, 0x9F, 0xFF},
	{0xEF, 0xEF, 0xC7, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF},
}

func setup() {
	firePixels = make([]int, width*height)
	// Set whole screen to 0 (color: 0x07,0x07,0x07)
	for i := 0; i < width*height; i++ {
		firePixels[i] = 0
	}

	// Set bottom line to 37 (color white: 0xFF,0xFF,0xFF)
	for i := 0; i < width; i++ {
		firePixels[(height-1)*width+i] = 36
	}
}

func spreadFire(src int) {
	pixel := firePixels[src]
	if pixel == 0 {
		firePixels[src-width] = 0
		return
	}
	randIdx := rand.Intn(3)
	dst := src - randIdx + 1
	firePixels[dst-width] = pixel - (randIdx & 1)
}

type doom struct{}

// Update applies the fire spread on each frame.
func (d *doom) Update(screen *ebiten.Image) error {
	for x := 0; x < width; x++ {
		for y := 1; y < height; y++ {
			spreadFire(y*width + x)
		}
	}
	return nil
}

// Draw plots the current fire framebuffer.
func (d *doom) Draw(screen *ebiten.Image) {
	for x := 0; x < width; x++ {
		waitGroup.Add(1)
		go func(x int) {
			defer waitGroup.Done()
			for y := 0; y < height; y++ {
				c := firePixels[y*width+x]
				screen.Set(x, y, rgb[c])
			}
		}(x)
	}
	waitGroup.Wait()
}

// Layout takes the outside size (e.g., the window size) and returns the (logical) screen size.
func (*doom) Layout(outsideWidth, outsideHeight int) (int, int) {
	return width, height
}

func main() {
	ebiten.SetWindowTitle("DOOM")
	ebiten.SetMaxTPS(ebiten.UncappedTPS)
	setup()

	if err := ebiten.RunGame(&doom{}); err != nil {
		panic(err)
	}
}
